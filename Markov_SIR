# -*- coding: utf-8 -*-
"""
Created on Wed Nov 30 12:54:14 2022

@author: Alejandro
"""
import numpy as np
import os
os.chdir("C:/Users/Alejandro/Documents/Research/Epimarkov/Algo_experiments/betasobreN")
from functions import *
import time
import matplotlib.pyplot as plt


##########Parameters

h = 1/8
GAMMA = 1/6
BETA = 1/2
p_2 = 1-np.exp(-h*GAMMA)
    

#Maximum population size
N = 100                                     


#number of repetitions of the Markovian SIR per fixed population size 
repetitions = 100000

    
##############Counting number of steps till epidemic end####################

#Cajas is a list containing steps_array's, each array contains simulated 
#number of steps it takes for the model to "end".
cajas=[]
for n in range(10,N+1,10):
    print(n)
    #Setting the initial condition
    #when moving to the next population size
    initial_state=np.array([n,1,0])
    #Initializing the array of steps for a fixed pop size
    steps_array=np.full([repetitions], None)
    #Counting duration for fixed parameter values BETA, GAMMA, h and N
    #for i in range(repetitions):
    i=0
    while i<repetitions:
        steps=0        
        #magic stuff: I start over from the same source as before
        (S,I,R) = initial_state
        while I>0:
            LAMBDA = BETA*I/n 
            p_star = 1-np.exp(-h*LAMBDA)
            I_new = np.random.binomial(S,p_star) 
            R_New = np.random.binomial(I,p_2)
            
            #Compartmental updating rules 
            S = S-I_new
            I = I+I_new-R_New
            R = R+R_New
        
            steps+=1
                
        steps_array[i] = steps
        i+=1
        
    cajas.append(steps_array)        

#Saving to text file
cajas=np.array(cajas)
np.savetxt('cajas_half_day.txt',cajas)
cajas=list(cajas)

#Creating boxplot        
fig = plt.figure()
plt.boxplot(cajas, 'ro')
plt.show()

#np.mean(cajas[0])


start_time = time.time()
means=np.zeros(10)
i=0
for n in range(10,N+1,10):
    print(n)
    print(h)
    print(GAMMA)
    BETA_2=BETA/n
    print(BETA_2)
    #Calling the Model class
    modelo=Model(n,h,GAMMA,BETA_2)
    diccionario=modelo.endOfEpidemic()
    #For each population size, take the mean duration starting from m_0
    #mean=diccionario[(n-1,1,0)]
    means[i]=diccionario[(n-1,1,0)].copy()
    #np.savetxt('Algo_experiments/mean_ht_%s.txt'%n,mean)
    i+=1
end_time = time.time()

#Saving to text file
np.savetxt('means_half_day.txt',means)



##################Loading results############
os.chdir("C:/Users/Alejandro/Documents/Research/Epimarkov/Algo_experiments/betasobreN")

means=[]
for i in range(10, 101, 10):
    a=np.loadtxt("mean_ht_" + str(i) + ".txt", dtype=float)
    a=float(a)
    means.append(a)

means=np.loadtxt("means_half_day" + ".txt", dtype=float)
cajas=np.loadtxt("cajas_half_day" + ".txt", dtype=float)
cajas=list(cajas)


########################################
################Plotting time###########
x_axis=np.linspace(10, 100, num=10)
for i in range(10):
    x_axis[i]=int(x_axis[i])
fig = plt.figure()
plt.figure(dpi=300)  #getting better resolution
plt.boxplot(cajas, 'ro',  positions= x_axis, widths=5)
plt.plot(x_axis, [np.mean(cajas[i]) for i in range(10)], 'b.')
plt.plot(x_axis, means[0:10], 'ro')
plt.xlabel('Population size')
plt.ylabel('Duration in hours')
# show plot
plt.title('Exact and simulated durations, h=12 hours')
plt.savefig("duration_half_day.png")
plt.show()

