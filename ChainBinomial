
# -*- coding: utf-8 -*-
"""
Created on Wed Nov 30 12:54:14 2022

@author: Alejandro
"""
import numpy as np
import os
os.chdir("C:/Users/Alejandro/Documents/Research/Epimarkov")
from functions import *
import time
import matplotlib.pyplot as plt


##########Parameters

h = 1/24
GAMMA = 1/6
BETA = 1/2
p_2 = 1-np.exp(-h*GAMMA)
    

#Maximum population size
N = 100                                     


#number of repetitions of the Markovian SIR per fixed population size 
repetitions = 50000

    
##############Counting number of steps till epidemic end####################

#Cajas is a list containing steps_array's, each array contains simulated 
#number of steps it takes for the model to "end".
cajas=[]
for n in range(10,N+1,10):
    print(n)
    #Setting the initial condition
    #when moving to the next population size
    initial_state=np.array([n,1,0])
    #Initializing the array of steps for a fixed pop size
    steps_array=np.full([repetitions], None)
    #Counting duration for fixed parameter values BETA, GAMMA, h and N
    #for i in range(repetitions):
    i=0
    while i<repetitions:
        steps=0        
        #magic stuff: I start over from the same source as before
        (S,I,R) = initial_state
        while I>0:
            LAMBDA = BETA*I 
            p_star = 1-np.exp(-h*LAMBDA)
            I_new = np.random.binomial(S,p_star) 
            R_New = np.random.binomial(I,p_2)
            
            #Compartmental updating rules 
            S = S-I_new
            I = I+I_new-R_New
            R = R+R_New
        
            steps+=1
                
        steps_array[i] = steps
        i+=1
        
    cajas.append(steps_array)        

#Creating boxplot        
fig = plt.figure()
plt.boxplot(cajas, 'ro')
plt.show()

